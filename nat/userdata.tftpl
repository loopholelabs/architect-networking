#!/bin/bash
set -euo pipefail

# Wait for network to be ready
sleep 10

# Get IMDSv2 token
TOKEN=$(curl -X PUT "http://169.254.169.254/latest/api/token" -H "X-aws-ec2-metadata-token-ttl-seconds: 21600")

# Get instance information
INSTANCE_ID=$(curl -s -H "X-aws-ec2-metadata-token: $TOKEN" http://169.254.169.254/latest/meta-data/instance-id)
INTERFACE_MAC=$(curl -s -H "X-aws-ec2-metadata-token: $TOKEN" http://169.254.169.254/latest/meta-data/network/interfaces/macs | head -n1 -c -1)

echo "Configuring routing for instance $INSTANCE_ID with mac $INTERFACE_MAC"

# Get the gateway from the primary interface
GATEWAY=$(ip route | grep default | awk '{print $3}')

# Get the MAC address of the default gateway
# First, ensure neighbor entry exists for gateway
ping -c 1 -W 1 $GATEWAY > /dev/null 2>&1 || true
sleep 1
# Use ip neigh to get the MAC address
GATEWAY_MAC=$(ip neigh get $GATEWAY dev ens5 | awk '{print $5}')

# Verify we got both MAC addresses
if [ -z "$INTERFACE_MAC" ] || [ -z "$GATEWAY_MAC" ]; then
  echo "Error: Failed to get MAC addresses"
  echo "Interface MAC: $INTERFACE_MAC"
  echo "Gateway MAC: $GATEWAY_MAC"
  exit 1
fi

echo "Interface MAC: $INTERFACE_MAC"
echo "Gateway MAC: $GATEWAY_MAC"

# Set MTU immediately
ip link set dev ens5 mtu 1500

# Ensure default route uses management IP as source
ip route del default || true
ip route add default via $GATEWAY dev ens5 src ${management_ip}

# Make the changes persistent for Ubuntu
cat > /etc/netplan/99-architect-routing.yaml <<EOF
network:
  version: 2
  ethernets:
    ens5:
      dhcp4: true
      dhcp4-overrides:
        use-routes: false
      mtu: 1500
      routes:
        - to: default
          via: $GATEWAY
          from: ${management_ip}
EOF

chmod 600 /etc/netplan/99-architect-routing.yaml
netplan apply

# Log the routing configuration
echo "Routing configured with management IP ${management_ip} as default source"
ip route show
ip addr show

# Configurre Architect for Networking
mkdir -p /var/run/architect-networking
mkdir -p /etc/architect-networking

cat > /etc/architect-networking/config.yaml << EOF
server_config:
  httpAddr: "/unix/var/run/architect-networking/architect.sock"

transit_config:
  # Network interface configuration
  interface_mac: "$INTERFACE_MAC"
  default_destination_mac: "$GATEWAY_MAC"

  # Management IP for this instance (optional)
  management_ip: ${management_ip}

  initial_nat_ips:
%{ for ip in floating_ips ~}
    - "${ip}"
%{ endfor ~}

  # Router and NAT feature flags
  disable_router: false
  disable_outbound_nat: false
  disable_inbound_nat: true
  disable_interfaces: true

  # Connection timeouts (in milliseconds)
  tcp_timeout: 300000  # 5 minutes (300 seconds * 1000ms)
  udp_timeout: 60000   # 1 minute (60 seconds * 1000ms)
  gc_interval: 30000   # 30 seconds (30 seconds * 1000ms)

  # ARP handling
  disable_arp: false

  # Event logging (set to true to reduce verbosity)
  disable_arp_events: true
  disable_icmp_events: true
  disable_udp_events: true
  disable_tcp_events: true

  # Initial firewall rules (empty by default, configure via API)
  initial_icmp_rules: []
  initial_tcp_rules: []
  initial_udp_rules: []

  # DDoS protection
  disable_ddos: true
  initial_ddos_ips: []

  # Interface configuration
  generic_mode: true
  interfaces:
    - "ens5"

# Optional StatsD configuration for metrics
# statsd_config:
#   address: "localhost:8125"
#   prefix: "conduit"
#   max_packet_size: 1400
EOF

# Setup Systemd
cat > /etc/systemd/system/architect-networking.service << EOF
[Unit]
Description=Architect NAT
Documentation=https://github.com/loopholelabs/architect-networking
After=network-online.target
After=docker.service
Wants=network-online.target
Wants=docker.service
StartLimitIntervalSec=0

[Service]
Type=simple
User=root
Group=root
ExecStartPre=/bin/mkdir -p /var/run/architect-networking
ExecStartPre=/bin/mkdir -p /var/log/architect-networking
ExecStartPre=/bin/mkdir -p /root/.local
ExecStart=docker run --user 0:0 --privileged --cap-add CAP_BPF --cap-add CAP_SYS_ADMIN --pid=host --network=host -e ARC_NET_DISABLE_DEV_WARNING=true -e XDG_CONFIG_HOME=/etc/architect-networking -e XDG_STATE_HOME=/var/log/architect-networking -e HOME=/root -v /sys:/sys -v /var/log/architect-networking:/var/log/architect-networking -v /etc/architect-networking:/etc/architect-networking -v /var/run/architect-networking:/var/run/architect-networking --ulimit=memlock=-1 docker.io/loopholelabs/architect-networking-run:${nat_version} nat --config /etc/architect-networking/config.yaml
Restart=always
RestartSec=5
StandardOutput=journal
StandardError=journal
SyslogIdentifier=architect-nat

# Security settings
PrivateTmp=true
ProtectSystem=false
ProtectHome=false
ReadWritePaths=/var/run/architect-networking /var/log/architect-networking /etc/architect-networking /root
NoNewPrivileges=false
AmbientCapabilities=CAP_NET_ADMIN CAP_NET_RAW CAP_SYS_ADMIN
CapabilityBoundingSet=CAP_NET_ADMIN CAP_NET_RAW CAP_SYS_ADMIN

# Resource limits
LimitNOFILE=65536
LimitNPROC=4096

[Install]
WantedBy=multi-user.target
EOF

sleep 10

# Install docker
curl -fsSL https://get.docker.com -o get-docker.sh
sh ./get-docker.sh

systemctl start docker
systemctl enable docker

docker login docker.io --username loopholelabs -p ${license_key}
docker pull docker.io/loopholelabs/architect-networking-run:${nat_version}

systemctl daemon-reload
systemctl start architect-networking
systemctl enable architect-networking

# Optional: Install the cloudwatch agent if enabled
# %{ if enable_cloudwatch_agent ~}
# yum -y install amazon-cloudwatch-agent
# cat >/opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json <<CFG
# {"logs":{"logs_collected":{"files":{"collect_list":[{"file_path":"/var/log/messages","log_group_name":"/architect-nat/${name}","log_stream_name":"{instance_id}"}]}}}}
# CFG
# /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -c file:/opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json -s
# %{ endif ~}