#!/bin/bash
set -eu pipefail

# Wait for network to be ready
sleep 10

# Get IMDSv2 token
TOKEN=$(curl -X PUT "http://169.254.169.254/latest/api/token" -H "X-aws-ec2-metadata-token-ttl-seconds: 21600")

# Get instance information
INSTANCE_ID=$(curl -s -H "X-aws-ec2-metadata-token: $TOKEN" http://169.254.169.254/latest/meta-data/instance-id)

echo "Configuring routing for instance $INSTANCE_ID"

# Get the gateway from the primary interface
GATEWAY=$(ip route | grep default | awk '{print $3}')

# Ensure default route uses management IP as source
ip route del default || true
ip route add default via $GATEWAY dev ens5 src ${management_ip}

# Make the changes persistent for Ubuntu
cat > /etc/netplan/99-architect-routing.yaml <<EOF
network:
  version: 2
  ethernets:
    ens5:
      dhcp4: true
      dhcp4-overrides:
        use-routes: false
      routes:
        - to: default
          via: $GATEWAY
          from: ${management_ip}
EOF

chmod 600 /etc/netplan/99-architect-routing.yaml
netplan apply

# Log the routing configuration
echo "Routing configured with management IP ${management_ip} as default source"
ip route show
ip addr show

# Optional: Install and configure Architect NAT if needed
# docker run --detach --name architect-nat \
#   --network host \
#   --privileged \
#   -e LICENSE_KEY="${license_key}" \
#   ghcr.io/yourco/architect-nat:${nat_version}

# Optional: Install the cloudwatch agent if enabled
# %{ if enable_cloudwatch_agent ~}
# yum -y install amazon-cloudwatch-agent
# cat >/opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json <<CFG
# {"logs":{"logs_collected":{"files":{"collect_list":[{"file_path":"/var/log/messages","log_group_name":"/architect-nat/${name}","log_stream_name":"{instance_id}"}]}}}}
# CFG
# /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -c file:/opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json -s
# %{ endif ~}